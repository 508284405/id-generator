---
description: 
globs: 
alwaysApply: true
---
项目基于DDD的COLA架构
1. adapter层：
    1.1 基本目录为src.main.java.com.leyue.id; web目录定义给客户端调用的API接口;filter目录定义常用的filter。
    1.2 通过client定义的DTO和service 与 app 交互。
    1.3 常见DTO有 MultiResponse，SingleResponse，PageQuery，PageResponse 等标准预定义的DTO。
    1.4 依赖client层，调用client提供的service能力。

2. client层：
    2.1 基本目录为src.main.java.com.leyue.id;api目录包含所有需要实现的service接口;dto目录包含所有模块使用的DTO对象。
    2.1 DTO类使用@Data注解替换GetSet方法。
    2.2 @UserContext.java 用户信息存储在这里。
    2.3 提供 service 接口给 adapter 调用，给app实现。

3. app层：
    3.1 基础目录src.main.java.com.leyue.id;下级目录为各个模块定义的模块化目录，具体包含以下内容：
        3.1.1 Impl实现类，完全实现client层定义的service接口。
        3.1.2 Impl实现类保证使用executor方式实现所有功能。
        3.1.3 executor目录，定义实现逻辑的具体执行器，每个executor包含一个execute执行方法。executor分为Qry和Cmd两类executor, Qry的executor通过mapper直接与Infra层交互, Cmd的executor通过Gateway接口与Infra层交互。
        3.1.4 scheduler 包含使用的定时器
        3.1.5 statemachine目录 包含使用到的状态机类。
    3.3 依赖infra层，调用基础设施层提供的能力。传递依赖domain层，调用domain层提供的Gateway接口能力。
    3.4 依赖client层，实现client层定义的service的业务逻辑。

4. domain层：
    4.1 基础目录src.main.java.com.leyue.id.domain;下级目录为各个模块定义的模块化目录，具体包含以下内容：
        4.1.1 model目录，定义该模块的核心领域模型对象，是充血模型。
        4.1.2 gateway目录，定义Gateway接口，给app层的executor调用。
        4.1.3 event目录，定义常用到的事件对象。
        4.1.4 enums目录，定义常用到的枚举类。
    4.3 该层为最等级层，不依赖任何层。

5. infra层：
    5.1: 基本目录为src.main.java.com.leyue.id;基本目录下是各个模块的定义目录，具体包含如下
        5.1.1: convertor目录，使用mapstruct定义转换接口(是接口而不是抽象类)，为domain对象和DO对象进行转换。
        5.1.2: dataobject目录，定义数据库DO对象，使用myatis-plus定义，并且统一继承位于com.leyue.web.infrastructure.common.dao基本的BaseDO对象。
        5.1.3: gateway目录，实现domain层定义的gatewayservice接口。
        5.1.4: mapper目录，定义访问数据库的mapper接口，使用mybatis-plus实现，继承BaseMapper。
    5.2: redis客户端使用Redisson，单节点模式。
    5.3: 依赖domain层，实现gateway接口的具体逻辑。
    5.4: resources目录下 存放数据库相关的文件，具体如下：
        5.4.1: mapper目录存放mybatis的xml文件。
        5.4.2: sql目录存放建表相关的sql文件。SQL目录代表了各个模块的逻辑关系，不可以直接修改SQL目录下的文件，可以给出修改建议。
6. 使用详细注释解释代码
7. 保证代码简洁清晰，模块化清晰，仅创建必须的类。在新增类或代码逻辑之前，应该先查看是否已经实现的类似的逻辑，用修改代替创建。
8. 在修改代码之前分析原有的业务逻辑，非必要情况下不能删除已经完善的业务逻辑。